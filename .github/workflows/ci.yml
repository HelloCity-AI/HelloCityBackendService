name: CI (Docker Compose)

on:
  # pull_request:
  #   branches: [ main, develop ]
  # for testing purpose
  push:
    branches: [ DEVOPS-val ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  compose-ci:
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: root
      POSTGRES_DB: HelloCityDb
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }} # <â€” add this repo secret
      ASPNETCORE_ENVIRONMENT: Development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      # cache package from the first time run to speed up build from redcuing the downloading time
      - name: Set up .NET 8 (with cache)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: '**/*.csproj'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test (with coverage)
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage"

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: '**/coverage.cobertura.xml'
          if-no-files-found: ignore

      # ---- Docker Compose: build & run API + Postgres ----
      - name: Build API image
        run: docker compose -f compose.yaml build hellocity.api

      - name: Start Postgres
        run: docker compose -f compose.yaml up -d postgres

      - name: Wait for Postgres
        run: |
          for i in {1..60}; do
            if docker compose -f compose.yaml exec -T postgres pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" >/dev/null 2>&1; then
              echo "Postgres is ready"; exit 0
            fi
            sleep 2
          done
          echo "Postgres did not become ready in time"; exit 1

      - name: Start API
        run: docker compose -f compose.yaml up -d hellocity.api

      # (add Health check later)

      - name: Collect logs
        if: always()
        run: |
          docker compose -f compose.yaml ps || true
          docker compose -f compose.yaml logs --no-color postgres > postgres.log || true
          docker compose -f compose.yaml logs --no-color hellocity.api > api.log || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: |
            postgres.log
            api.log
          if-no-files-found: ignore

      - name: Teardown
        if: always()
        run: docker compose -f compose.yaml down -v