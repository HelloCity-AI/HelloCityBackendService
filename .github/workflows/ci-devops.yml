name: CI Devops
on:
  # pull_request:
  #   branches: [ main, develop ]
  # for testing purpose
  # push:
  #   branches: [ DEVOPS-val ]
  workflow_dispatch:
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
jobs:
  compose-ci:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: root
      POSTGRES_DB: HelloCityDb
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
      ASPNETCORE_ENVIRONMENT: Development
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: '**/*.csproj'
      
      - name: Restore
        run: dotnet restore
      
      - name: Build
        run: dotnet build --configuration Release --no-restore
      
      - name: Test (with coverage)
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage"
      
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: '**/coverage.cobertura.xml'
          if-no-files-found: ignore

# ---- Docker Compose: build & run API + Postgres ----
      - name: Build API image
        run: docker compose -f compose.yaml build hellocity.api
      
      - name: Start services
        run: docker compose -f compose.yaml up -d
      
      - name: Wait for services to stabilize
        run: |
          echo "Giving services 30 seconds to start up..."
          sleep 30
          echo "Services status:"
          docker compose -f compose.yaml ps
      
      - name: Wait for API health
        run: |
          echo "Starting health check..."
          for i in {1..60}; do
            echo "Health check attempt $i/60..."
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5050/health || echo "000")
            echo "HTTP Status: $status"
            
            if [ "$status" = "200" ]; then
              echo "API is healthy!"; 
              exit 0
            fi
            
            # Show logs every 10 attempts
            if [ $((i % 10)) -eq 0 ]; then
              echo "--- API logs (last 10 lines) ---"
              docker compose -f compose.yaml logs hellocity.api --tail=10
            fi
            
            sleep 3
          done
          echo "API health check failed after 3 minutes"
          exit 1
           

      - name: Verify API endpoints
        run: |
          echo "Testing API endpoints..."
          
          # Test health endpoint
          response=$(curl -s -w "%{http_code}" http://localhost:5050/health)
          http_code="${response: -3}"
          
          if [ "$http_code" -eq 200 ]; then
            echo "Health endpoint responding (HTTP $http_code)"
          else
            echo "Health endpoint failed (HTTP $http_code)"
            exit 1
          fi
          
      - name: Show service health status
        if: always()
        run: |
          echo "=== Final Health Status ==="
          docker compose -f compose.yaml ps
          echo ""
          echo "=== Health Check Details ==="
          docker inspect hellocity.api --format='{{json .State.Health}}' | jq '.' || echo "No health data for API"
          docker inspect hellocity_postgres --format='{{json .State.Health}}' | jq '.' || echo "No health data for Postgres"

      - name: Collect logs
        if: always()
        run: |
          docker compose -f compose.yaml ps || true
          docker compose -f compose.yaml logs --no-color postgres > postgres.log || true
          docker compose -f compose.yaml logs --no-color hellocity.api > api.log || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: |
            postgres.log
            api.log
          if-no-files-found: ignore

      - name: Teardown
        if: always()
        run: docker compose -f compose.yaml down -v
